const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_forward_request_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);let jsm_prefix;let common_prefix;if("undefined"!==typeof process){jsm_prefix=`file:///${kh_global.kh.pathes.get("own-module")}`;common_prefix=`file:///${kh_global.kh.pathes.get("common")}`}else{jsm_prefix=`/contrib/jsm`;console.assert(0,`${mf} is only for node.js`)}const kh_js={...await import(`${jsm_prefix}/kh_earlybird${VERSION}.js`)};let print_level=undefined;const{Logger}=await import(`${jsm_prefix}/kh_log${VERSION}.js`);const kh_log=new Logger(print_level,(()=>name));const name=MF`${mf}`;export const getOwnURL=req=>req&&`${req.protocol}://${req.get("host")}`||"";export const get_method=req=>req?.route?.stack?.[0]?.method||req?.method?.toUpperCase()||"xfunc";export const get_method2=req=>`${get_method(req)}(${req?.route?.path})`;export const ip4_test=address=>kh_js.isString(address)&&ip4_rex.test(address);import*as os from"node:os";export const get_server_ips=(family=4)=>{let ips=[];const ifaces=os.networkInterfaces();Object.keys(ifaces).forEach((ifname=>{ifaces[ifname].forEach((iface=>{if(family!==iface.family&&`IPv${family}`!==iface.family||false!==iface.internal)return;ips.push({ifname,address:iface.address})}))}));return ips};const ip4$6="::ffff:";export const get_client_ip=(req,map2IP4=true)=>{let client_ip=req.headers["x-forwarded-for"]?.split(",").shift()||req.socket?.remoteAddress;if(map2IP4&&client_ip?.startsWith(ip4$6))client_ip=client_ip.substring(ip4$6.length);return client_ip};export const get_client_ips=(server,map2IP4=true)=>{let handles=process._getActiveHandles();return handles.map((handle=>handle.readable&&handle.writable&&handle.server===server?handle.remoteAddress:undefined)).map((address=>map2IP4&&address?.startsWith(ip4$6)?address.substring(ip4$6.length):address)).filter((address=>!kh_js.isEmpty(address)))};export const is_internal_request=(req,server,map2IP4=true)=>{const client_ip=get_client_ip(req,map2IP4);const index=get_client_ips(server,map2IP4)?.findIndex((cip=>client_ip==cip))??-1;return-1!=index};import*as cookie from"cookie";import*as cookieParser from"cookie-parser";export function get_session_id({session_cookie_name,session_secret},req){if(!kh_js.isValid(req)){const is_paas=kh_js.isPaaS();return!is_paas?req=>req.session.id:req=>{try{return cookieParser.signedCookie(cookie.parse(req.headers.cookie)[session_cookie_name],session_secret)}catch(error){return"-1"}}}else return get_session_id(arguments[0])(req)}kh_global.LoadedScripts.get(mf).resolve(ms);