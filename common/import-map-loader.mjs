const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;import*as path from"node:path";import*as fs from"node:fs";import{fileURLToPath,pathToFileURL}from"node:url";import{default as get_node_module_path}from"./get_node_module_path.cjs";let z=0;if("developement"!==process.env.NODE_ENV){}export async function resolve(specifier,context,nextResolve){if(undefined==globalThis.kh_imports&&3>=++z){try{const cwd=process.cwd().replaceAll("\\","/")+"/";console.log?.("cwd",cwd," z= ",z,{...import.meta,fileURLToPath:fileURLToPath(import.meta.url)});let common_path=import.meta.url.replaceAll("\\","/");let pos=common_path.lastIndexOf("/");common_path=common_path.substring(0,pos+1);let kh_contrib_path;try{kh_contrib_path=path.resolve("./contrib/");if(fs.existsSync(kh_contrib_path+"/"))kh_contrib_path=pathToFileURL(kh_contrib_path+"/");else{kh_contrib_path=new URL("../contrib/",common_path);if(!fs.existsSync(kh_contrib_path))throw kh_contrib_path}}catch(error){if(error instanceof SyntaxError)console.error?.(`${error} / ${error.stack}`);kh_contrib_path=new URL("../../../web/",common_path);if(!fs.existsSync(kh_contrib_path))throw kh_contrib_path}if(false){const nodi_path=import.meta.resolve("json8-merge-patch");console.log?.("nodiiiiiiiiiii",nodi_path)}const node_module_path=get_node_module_path();globalThis.kh_imports??=JSON.parse(`{\n                "imports"       : {\n                            "/contrib/jsm/"         : "${new URL("jsm/",kh_contrib_path)}",\n                            "/contrib/js/"          : "${new URL("js/",kh_contrib_path)}",\n                            "/common/"              : "${common_path}",\n                            "/app/js/"              : "~./js/",\n                            "/node-modules/"        : "${pathToFileURL(`${node_module_path}/`)}",\n                            "/cdn/"                 : "${pathToFileURL(`${node_module_path}/`)}",\n                            "tinyduration"          : "${pathToFileURL(`${node_module_path}/tinyduration/dist/index.js`)}"\n\n                    }\n            }`).imports;let json_fn="./importmap.json";let content={};if(!fs.existsSync(json_fn))json_fn=path.resolve(json_fn);if(fs.existsSync(json_fn)){let content=fs.readFileSync(json_fn,"utf8");if(Object.prototype.toString.call(content)==="[object String]"){try{content=JSON.parse(content)}catch(error){content={}}}globalThis.kh_imports={...globalThis.kh_imports,...content.imports||{}}}console.log?.("~~~~",common_path,"~~~~~~~~~~~~~~~~",kh_contrib_path.toString());for(const[key,value]of Object.entries(globalThis.kh_imports)){if(value.startsWith("~./"))globalThis.kh_imports[key]=pathToFileURL(`${cwd}${value.substring(3)}`).toString()}}catch(error){console.log?.("error=",error)}}if(undefined!==globalThis.kh_imports){let match_key=undefined;for(const key in globalThis.kh_imports){if(specifier.startsWith(key)){if(key.length>(match_key?.length??0)){match_key=key}}}if(undefined!==match_key){specifier=`${globalThis.kh_imports[match_key]}${specifier.substring(match_key.length)}`}}return nextResolve(specifier,context)}