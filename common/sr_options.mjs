const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_sr_options_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import*as kh_js_e from"/contrib/jsm/kh_earlybird.js";import*as kh_js_c from"/contrib/jsm/kh_classes.js";const kh_js=Object.assign({...kh_js_e},{...kh_js_c});const name=MF`${mf}`;const print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,(()=>name));export class SROptionsMap extends Map{constructor(){super()}t(key){if(!kh_js.isValid(key))throw new kh_js.Error({msg:["invalid-argument","key",key]});key=key.trim("/");return key}get(key){return super.get(this.t(key))}set(key,data){return super.set(this.t(key),data)}has(key){return super.has(this.t(key))}merge(key,data){return this.set(key,kh_js.JSON8MergePatch.apply(this.get(key)??{},data,{assign:true}))}toJSON(){return Object.fromEntries(this)}static join(...sub_pathes){if(kh_js.isEmpty(sub_pathes))return"";return sub_pathes.map((sp=>sp.trim("/"))).join("/")}}kh_global.LoadedScripts.get(mf).resolve(ms);