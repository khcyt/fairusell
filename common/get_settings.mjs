const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_get_settings_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);let jsm_prefix;let common_prefix;if("undefined"!==typeof process){jsm_prefix=`file:///${kh_global.kh.pathes.get("own-module")}`;common_prefix=`file:///${kh_global.kh.pathes.get("common")}`}else{jsm_prefix=`/contrib/jsm`;console.assert(0,`${mf} is only for node.js`)}let kh_js={};Object.assign(kh_js,await import(`${jsm_prefix}/kh_earlybird${VERSION}.js`));Object.assign(kh_js,await import(`${jsm_prefix}/kh_classes${VERSION}.js`));Object.assign(kh_js,await import(`${jsm_prefix}/kh_functions${VERSION}.js`));let print_level=undefined;const{Logger}=await import(`${jsm_prefix}/kh_log${VERSION}.js`);const kh_log=new Logger(print_level,(()=>MF`${mf}`));const{SROptionsMap}=await import(`${common_prefix}/sr_options${VERSION}.mjs`);export class SettingsFilter extends SROptionsMap{static#as_="app-settings";static#ss_="server-settings";static#as_rex_=new RegExp(`^[/]?${SettingsFilter.#as_}(?:/([^/]+))?[/]?$`);constructor(){super()}tf(sub_route,func){const as_match=SettingsFilter.#as_rex_.exec(sub_route);if(!kh_js.isEmpty(as_match?.[1])){sub_route=SettingsFilter.#as_;func={sr:as_match[1],f:func}}else sub_route=this.t(sub_route);return{sub_route,func:func??{}}}add(sub_route,func){({sub_route,func}=this.tf(sub_route,func));let funcs=this.get(sub_route);funcs||this.set(sub_route,funcs=[]);funcs.push(func)}remove(sub_route,func){({sub_route,func}=this.tf(sub_route,func));let funcs=this.get(sub_route);if(kh_js.isEmpty(funcs))return;const idx=funcs.findIndex((f=>(f.f??f)==func));if(-1!=idx)funcs.splice(idx,1)}process(sub_route,settings={}){let func;({sub_route,func}=this.tf(sub_route,undefined));let funcs=this.get(sub_route);if(kh_js.isEmpty(funcs))return settings;if(SettingsFilter.#as_==sub_route){settings=funcs.reduce(((cur_settings,f)=>(kh_js.isEmpty(func.sr)||kh_js.isEmpty(f.sr)||f.sr==func.sr)&&(f.f??f)(cur_settings)||cur_settings),settings)}else{settings=funcs.reduce(((cur_settings,f)=>f(cur_settings)),settings);if(SettingsFilter.#ss_==sub_route)settings=this.process(SettingsFilter.#as_,settings)}return settings}}export const SettingsFilterFunc=new SettingsFilter;export async function MakeGetSettingsRouter(server_context=cs,sub_route,add_config={}){const Router=(await import(`${common_prefix}/router_sub_route${VERSION}.mjs`)).Router;const router=new Router(undefined,sub_route,add_config.router_opt);const filter=function(server_settings){delete server_settings.key;delete server_settings.cert;delete server_settings.passw;delete server_settings.passphrase;delete server_settings.session_secret;return server_settings};SettingsFilterFunc.add("/server-settings",filter);router.get("/server-settings",((req,res,next)=>{kh_log.debug?.(`router:${server_context.get_method2(req)}) -> request= ${req.originalUrl}, sessionID= ${server_context.sessionID(req)}`);let settings=JSON.parse(JSON.stringify(server_context.server_options||{}));settings=SettingsFilterFunc.process(req.path,settings);res.json(settings)})).get("/:sub_route?/app-settings",((req,res,next)=>{kh_log.debug?.(`router:${server_context.get_method2(req)}) -> request= ${req.originalUrl}, sessionID= ${server_context.sessionID(req)}`);const sub_route=req.params.sub_route;let settings=JSON.parse(JSON.stringify(server_context.server_options||{}));settings=SettingsFilterFunc.process(`/app-settings/${sub_route}`,settings);settings=(kh_js.isEmpty(req.params.sub_route)?settings.app_settings:settings.sr?.[sub_route])||{};res.json(settings)}));return router}kh_global.LoadedScripts.get(mf).resolve(ms);