const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_get_release_version_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);let jsm_prefix;if("undefined"!==typeof process){jsm_prefix=`file:///${kh_global.kh.pathes.get("own-module")}`}else{jsm_prefix=`/contrib/jsm`}let kh_js={};Object.assign(kh_js,await import(`${jsm_prefix}/kh_earlybird${VERSION}.js`));Object.assign(kh_js,await import(`${jsm_prefix}/kh_classes${VERSION}.js`));Object.assign(kh_js,await import(`${jsm_prefix}/kh_functions${VERSION}.js`));let print_level=undefined;const{Logger}=await import(`${jsm_prefix}/kh_log${VERSION}.js`);const kh_log=new Logger(print_level,(()=>MF`${mf}`));const path=await import("path");const fs=await import("fs");export function getPackageData(){let package_json={};const founded_file=path.resolve("./package.json");if(kh_js.isEmpty(founded_file))return package_json;let pd=fs.readFileSync(founded_file,"utf-8");try{pd=JSON.parse(pd);return{...package_json,...pd}}catch(error){kh_log.error?.(T9`error in ${kh_js.currentFunctionName()} => ${error}`);return package_json}}export function getReleaseVersion(){try{return getPackageData().version||"0.0.0"}catch(error){kh_log.error?.(T9`error in ${kh_js.currentFunctionName()} => ${error}`);return"0.0.0"}}kh_global.LoadedScripts.get(mf).resolve(ms);