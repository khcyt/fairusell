const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_files_from_pathes_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import*as fs from"node:fs";import*as fsPromises from"node:fs/promises";import*as kh_js_e from"/contrib/jsm/kh_earlybird.js";import*as kh_js_c from"/contrib/jsm/kh_classes.js";import*as kh_js_f from"/contrib/jsm/kh_functions.js";const kh_js=Object.assign({...kh_js_e},{...kh_js_c},{...kh_js_f});let print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,(()=>MF`${mf}`));import{fileURLToPath,pathToFileURL}from"node:url";function processPathes(filename,pathes,force_url){pathes=kh_js.isValid(pathes)&&!Array.isArray(pathes)?[pathes]:pathes;return pathes?.map((path=>{const is_url=path instanceof URL;return!(is_url^force_url)?path:!is_url&&force_url?pathToFileURL(path):fileURLToPath(path)})).map((path=>path instanceof URL?new URL(filename,path):path+filename))}function _getFileFromStaticPathes(filename,pathes,force_url){return processPathes(filename,pathes,force_url)?.find((path=>fs.existsSync(path)))}export function getFileFromStaticPathes(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFileFromStaticPathes(filename,pathes,false)}export function getFileFromStaticPathesURL(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFileFromStaticPathes(filename,pathes,true)}async function _getFileFromStaticPathesAsync(filename,pathes,force_url){const fn_promises=processPathes(filename,pathes,force_url)?.map((async fn=>fsPromises.stat(fn).then((async stats=>stats.isFile()?Promise.resolve(fn):Promise.reject("ENOENT")))));return Promise.any(fn_promises).catch((error=>Promise.reject(new kh_js.Error({msg:["param-not-determined","filename",filename],code:error}))))}export async function getFileFromStaticPathesAsync(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFileFromStaticPathesAsync(filename,pathes,false)}export async function getFileFromStaticPathesURLAsync(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFileFromStaticPathesAsync(filename,pathes,true)}function _getFilesFromStaticPathes(filename,pathes,force_url){return processPathes(filename,pathes,force_url)?.filter(fs.existsSync)}export function getFilesFromStaticPathes(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFilesFromStaticPathes(filename,pathes,false)}export function getFilesFromStaticPathesURL(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){return _getFilesFromStaticPathes(filename,pathes,true)}export async function getFilesFromStaticPathesAsync(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){pathes=kh_js.isValid(pathes)&&!Array.isArray(pathes)?[pathes]:pathes;pathes=pathes?.map((sfp=>sfp instanceof URL?fileURLToPath(sfp):sfp));const match_wildcard=-1!=filename.indexOf("*")||-1!=filename.indexOf("?");if(!match_wildcard){const fn_promises=pathes?.map((path=>path+filename)).map((fn=>fsPromises.stat(fn).then((async stats=>stats.isFile()?Promise.resolve(fn):Promise.reject("ENOENT")))));return Promise.allSettled(fn_promises).then((async results=>results.filter((result=>"fulfilled"==result.status)).map((result=>result.value)))).then((async fns=>!kh_js.isEmpty(fns)?Promise.resolve(fns):Promise.reject(new kh_js.Error("param-not-determined","filename",filename))))}else{const pos_sl=filename.lastIndexOf("/");let post_fix_path;if(-1!=pos_sl){post_fix_path=filename.substring(0,pos_sl+1);filename=filename.substring(pos_sl+1)}filename=filename.replace(/\./g,"\\.");filename=filename.replace(/\?/g,".?");filename=filename.replace(/\*/g,".*");filename=new RegExp(filename);return Promise.allSettled(pathes?.map((path=>!kh_js.isEmpty(post_fix_path)?path+post_fix_path:path)).map((path=>fsPromises.readdir(path,"utf8").then((async dirlist=>({dirlist,path})))))).then((async results=>results.filter((result=>"fulfilled"==result.status)).map((result=>result.value)))).then((async dirlist=>dirlist.map((entry=>({path:entry.path,dirlist:entry.dirlist.filter((fn=>filename.test(fn)))}))).filter((entry=>!kh_js.isEmpty(entry.dirlist))).map((entry=>entry.dirlist.map((fn=>entry.path+fn)))).flat())).then((async fns=>!kh_js.isEmpty(fns)?Promise.resolve(fns):Promise.reject(new kh_js.Error("param-not-determined","filename",filename))))}}export async function getFilesFromStaticPathesURLAsync(filename,pathes=cs.server_options?.app_settings?.static_files_pathes){const match_wildcard=-1!=filename.indexOf("*")||-1!=filename.indexOf("?");if(!match_wildcard){const fn_promises=processPathes(filename,pathes,true)?.map((async fn=>fsPromises.stat(fn).then((async stats=>stats.isFile()?Promise.resolve(fn):Promise.reject("ENOENT")))));return Promise.allSettled(fn_promises).then((async results=>results.filter((result=>"fulfilled"==result.status)).map((result=>result.value)))).then((async fns=>!kh_js.isEmpty(fns)?Promise.resolve(fns):Promise.reject(new kh_js.Error("param-not-determined","filename",filename))))}else{const pos_sl=filename.lastIndexOf("/");let post_fix_path="./";if(-1!=pos_sl){post_fix_path=filename.substring(0,pos_sl+1);filename=filename.substring(pos_sl+1)}filename=filename.replace(/\./g,"\\.");filename=filename.replace(/\?/g,".?");filename=filename.replace(/\*/g,".*");filename=new RegExp(filename);return Promise.allSettled(processPathes(post_fix_path,pathes,true)?.map((path=>fsPromises.readdir(path,"utf8").then((async dirlist=>({dirlist,path})))))).then((async results=>results.filter((result=>"fulfilled"==result.status)).map((result=>result.value)))).then((async dirlist=>dirlist.map((entry=>({path:entry.path,dirlist:entry.dirlist.filter((fn=>filename.test(fn)))}))).filter((entry=>!kh_js.isEmpty(entry.dirlist))).map((entry=>entry.dirlist.map((fn=>new URL(fn,entry.path))))).flat())).then((async fns=>!kh_js.isEmpty(fns)?Promise.resolve(fns):Promise.reject(new kh_js.Error("param-not-determined","filename",filename))))}}kh_global.LoadedScripts.get(mf).resolve(ms);