const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_io";const mf="kh_io_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);let jsm_prefix;let common_prefix;let npm_prefix;if("undefined"!==typeof process){jsm_prefix=`file:///${kh_global.kh.pathes.get("own-module")}`;common_prefix=`file:///${kh_global.kh.pathes.get("common")}`;npm_prefix=`file:///${kh_global.kh.pathes.get("node-module")}`}else{jsm_prefix=nodeFN2ZK(`/contrib/jsm`)}const kh_js={...await import(`${jsm_prefix}/kh_earlybird${VERSION}.js`),...await import(`${jsm_prefix}/kh_functions${VERSION}.js`),...await import(`${jsm_prefix}/kh_classes${VERSION}.js`)};const name=MF`${mf}`;const print_level=undefined;const{Logger}=await import(`${jsm_prefix}/kh_log${VERSION}.js`);const kh_log=new Logger(print_level,(()=>name));if("undefined"!==typeof process){kh_global.fetch=(await import(`${npm_prefix}/node-fetch/src/index.js`)).default}else{}let IOStringMap=function(){const ism=new kh_js.StringMap({"connection-timeout":{de:"Zeitüberschreitung in der Verbindung",en:"connection timeout"},"connection-failure":{de:"Verbindungfehler",en:"connection failure"},"connection-request-failed":{de:"Verbindung konnte nicht hergestellt werden",en:"connection request failed"},"not.connected":{de:"Nicht verbunden",en:"not connected"},connected:{de:"Verbunden über",en:"connected to"}});kh_js.StringMap.getGlobalMap().addEntries(ism);return ism}();export function HTTPError(err_class){return class extends err_class{constructor(){super(...arguments)}toJSON(){this["HTTP-Status"]??=this.status;return super.toJSON()}}}export class Util{static use_fetch=!kh_js.isNode()||"fetch"in kh_global;static async fetchData(http_method="GET",url="",data={},_fetch_options={}){const fetch_options=kh_js.cloneObject(_fetch_options);const get_native=true==fetch_options.get_native;const get_json=true==fetch_options.get_json;const send_json=false!=fetch_options.send_json;const on_error_set="on_error"in fetch_options;const on_error=fetch_options.on_error;delete fetch_options.get_json;delete fetch_options.send_json;delete fetch_options.get_native;delete fetch_options.on_error;let headers="GET"==http_method||null===data?{}:{"Content-Type":send_json?"application/json":"application/octet-stream"};if(Util.use_fetch){return kh_global.fetch(url,{method:http_method,mode:"cors",cache:"default",credentials:"same-origin",redirect:"follow",referrer:"",referrerPolicy:"strict-origin-when-cross-origin",body:"GET"==http_method?undefined:!send_json?data:JSON.stringify(data),...fetch_options,headers:{...headers,...fetch_options.headers}}).then((async response=>{if(false==response.ok&&"ignore"!=on_error)throw new(HTTPError(kh_js.Error))({status:response.status,statusText:response.statusText,msg:[response.statusText],response});return get_native?Promise.resolve(response):get_json?response.json():response.text()})).catch((error=>on_error_set?Promise.resolve("error"==on_error?error:on_error):Promise.reject(error)))}else{const get_and_set_json=get_json;let headers="GET"==http_method||null===data?{}:{"Content-Type":send_json?"application/json":"application/octet-stream"};headers={...headers,...fetch_options.headers};const send_json=-1!=headers["content-type"].indexOf("json");return request({method:http_method,uri:url,body:"GET"==http_method?undefined:data,...fetch_options,headers,resolveWithFullResponse:get_native,json:get_and_set_json&&!get_native}).catch((error=>on_error_set?Promise.resolve(on_error):Promise.reject(error)))}}static async fetchData2(http_method="GET",url,data={},fetch_options={}){const can_fail=fetch_options.can_fail;delete fetch_options.can_fail;return Util.fetchData(http_method,url,data,{get_json:true,on_error:"ignore",...fetch_options}).then((json=>{if(kh_js.isValid(json.error))throw json;if(400<=json.status)throw json;return Promise.resolve(json)})).catch((error=>{kh_log.trace?.(T9`Error is signaled, decision is made based on can_fail ${can_fail}, ${error}`);return can_fail?Promise.resolve(error):Promise.reject(error)}))}static ownIP(){return Util.fetchData(undefined,"/client-ip",undefined,{get_json:true}).then((json=>json.error?Promise.reject(json):Promise.resolve(json))).catch((error=>Util.fetchData(undefined,"https://jsonip.com/?callback",undefined,{get_json:true}))).then((json=>Promise.resolve(json.ip))).catch((error=>Promise.reject(new kh_js.Error({error,msg:["data-not-determined","own IP"]}))))}static getQueryString(o){if(kh_js.isEmpty(o))return"";return Object.entries(o).map((entry=>{let value=entry[1];if(kh_js.isPlainObject(value)){value=JSON.stringify(value)}return`${encodeURIComponent(entry[0])}=${encodeURIComponent(value)}`})).join("&")}}export{IOStringMap};kh_global.LoadedScripts.get(mf).resolve(ms);